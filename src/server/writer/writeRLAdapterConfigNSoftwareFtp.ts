import xmlbuilder, { XMLDocumentCB } from 'xmlbuilder';
import {
  AdapterConfigReceive,
  AdapterConfigReceiveNSoftwareFtp,
} from '../../shared/model';

const writeRLAdapterConfigNSoftwareFtp = (
  feed: XMLDocumentCB,
  adapterConfig: AdapterConfigReceive,
  address: string,
): void => {
  const config = adapterConfig as AdapterConfigReceiveNSoftwareFtp;
  feed.text(
    xmlbuilder
      .create('CustomProps', { headless: true })
      .ele('AdapterConfig', { vt: 8 })
      .text(
        xmlbuilder
          .create('Config', { headless: true })
          .att('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance')
          .att('xmlns:xsd', 'http://www.w3.org/2001/XMLSchema')
          .ele('Account')
          .up()
          .ele('AfterConnect')
          .up()
          .ele('AfterGet')
          .up()
          .ele('BeforeGet')
          .up()
          .ele('DeleteMode', 1)
          .up()
          .ele('ErrorThreshold', 5)
          .up()
          .ele('FileMask', config.fileMask)
          .up()
          .ele('Firewall')
          .ele('AutoDetect', 'False')
          .up()
          .ele('FirewallType', 0)
          .up()
          .ele('Host')
          .up()
          .ele('Password', '******')
          .up()
          .ele('Port', 0)
          .up()
          .ele('User')
          .up()
          .up()
          .ele('FTPPort', config.port)
          .up()
          .ele('FTPServer', config.server)
          .up()
          .ele('MaxBatchSize', 0)
          .up()
          .ele('MAxFileCount', 10)
          .up()
          .ele('MaxFileSize', 0)
          .up()
          .ele('Other')
          .up()
          .ele('Passive', 'True')
          .up()
          .ele('Password', '******')
          .up()
          .ele('PersistentConnection', 'False')
          .up()
          .ele('PollingInterval', config.pollingInterval)
          .up()
          .ele('RemotePath', config.path)
          .up()
          .ele('RuntimeLicense')
          .up()
          .ele('SSLAcceptServerCert')
          .ele('AcceptAny', 'True')
          .up()
          .ele('StoreType', 0)
          .up()
          .ele('Store', 'MY')
          .up()
          .ele('Subject')
          .up()
          .ele('StorePassword', '******')
          .up()
          .up()
          .ele('SSLCert')
          .ele('Store', 'MY')
          .up()
          .ele('StorePassword', '******')
          .up()
          .ele('StoreType', 0)
          .up()
          .ele('Subject')
          .up()
          .up()
          .ele('SSLStartMode', 0)
          .up()
          .ele('SSOAffiliate', config.ssoAffiliate)
          .up()
          .ele('TempPath')
          .up()
          .ele('Timeout', 60)
          .up()
          .ele('TransferMode', 0)
          .up()
          .ele('TransportLog')
          .ele('Location', 'Application')
          .up()
          .ele('LogMode', 3)
          .up()
          .ele('LogType', 1)
          .up()
          .up()
          .ele('URIIdentity', 'FTP://')
          .up()
          .ele('User', config.userName)
          .up()
          .ele('UseSimpleDirList', 'False')
          .up()
          .ele('uri', address)
          .end(),
      )
      .end(),
  );
};

export default writeRLAdapterConfigNSoftwareFtp;
